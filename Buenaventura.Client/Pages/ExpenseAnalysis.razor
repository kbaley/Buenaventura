@page "/expense-analysis"
@using Buenaventura.Client.Components.DashboardCharts
@inject IDashboardService dashboardService

@attribute [Authorize]

<MudText Typo="Typo.h4" GutterBottom="true">Expense Analysis</MudText>

<MudGrid>
    <!-- Monthly Expenses Line Chart -->
    <MudItem xs="12" md="9">
        <LineChart
            IsLoading="isLoading"
            ChartData="@monthlyExpenseData"
            Title="Monthly Expenses (Last 12 Months)"
                Height="350"
            />
    </MudItem>

    <!-- Total Expenses This Month -->
    <MudItem xs="12" md="3">
        <MudPaper Elevation="1" Class="pa-4">
            <MudText Typo="Typo.h6">Expenses This Month</MudText>
            <MudText Typo="Typo.h4" Color="Color.Success">@(expensesThisMonth.ToString("C"))</MudText>
        </MudPaper>
    </MudItem>

    <!-- Expense Breakdown by Category -->
    <MudItem xs="12" md="6">
        <MudPaper Elevation="1" Class="pa-4" Height="335px">
            <ExpenseChart
                IsLoading="@isLoading"
                ExpenseData="@expenseData"
            />
        </MudPaper>
    </MudItem>

    <!-- Expense Averages -->
    <MudItem xs="12" md="6">
        <MudPaper Elevation="1" Class="pa-4" Height="335px">
            <ExpenseAveragesChart
                IsLoading="isLoading"
                ExpenseData="@expenseAveragesData"
            />
        </MudPaper>
    </MudItem>

    <!-- Expense Category Monthly Breakdown Table -->
    <MudItem xs="12">
        <MudPaper Elevation="1" Class="pa-4">
            <MudText Typo="Typo.h6" GutterBottom="true">Expense Categories by Month</MudText>
            <MudTable Items="@categoryMonthlyData" Dense="true" Hover="true" Bordered="true" Striped="true">
                <HeaderContent>
                    <MudTh>Category</MudTh>
                    @foreach (var month in lastTwelveMonths)
                    {
                        <MudTh>@month</MudTh>
                    }
                    <MudTh>Total</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Category">@context.CategoryName</MudTd>
                    @foreach (var amount in context.MonthlyAmounts)
                    {
                        <MudTd DataLabel="@amount.Month">@amount.Amount.ToString("C0")</MudTd>
                    }
                    <MudTd DataLabel="Total">@context.Total.ToString("C0")</MudTd>
                </RowTemplate>
                <FooterContent>
                    <MudTh>Total</MudTh>
                    @foreach (var total in monthlyTotals)
                    {
                        <MudTh>@total.ToString("C0")</MudTh>
                    }
                    <MudTh>@grandTotal.ToString("C0")</MudTh>
                </FooterContent>
            </MudTable>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private bool isLoading = true;
    private decimal expensesThisMonth;
    private IEnumerable<ReportDataPoint> expenseData = [];
    private IEnumerable<ExpenseAveragesDataPoint> expenseAveragesData = [];
    private IEnumerable<ReportDataPoint> monthlyExpenseData = [];
    private List<string> lastTwelveMonths = [];
    private List<CategoryMonthlyData> categoryMonthlyData = [];
    private List<decimal> monthlyTotals = [];
    private decimal grandTotal = 0;

    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;
        var expensesTask = dashboardService.GetThisMonthExpenses();
        var expenseTask = dashboardService.GetExpenseData();
        var expenseAveragesTask = dashboardService.GetExpenseAveragesData();
        await Task.WhenAll(
            expensesTask,
            expenseTask,
            expenseAveragesTask
        );

        expensesThisMonth = -(await expensesTask);
        expenseData = await expenseTask;
        expenseAveragesData = await expenseAveragesTask;
        StateHasChanged();
        isLoading = false;
        
        GenerateSampleData();

        await base.OnParametersSetAsync();
    }

    private void GenerateSampleData()
    {
        // Generate last 12 months
        var currentDate = DateTime.Now;
        for (int i = 11; i >= 0; i--)
        {
            var date = currentDate.AddMonths(-i);
            lastTwelveMonths.Add(date.ToString("MMM yyyy"));
        }

        // Sample monthly expense data for line chart
        var monthlyExpenses = new List<ReportDataPoint>();
        var random = new Random(123); // Fixed seed for consistent sample data
        for (int i = 0; i < 12; i++)
        {
            var baseAmount = 2000 + random.Next(-300, 500);
            monthlyExpenses.Add(new ReportDataPoint
            {
                Label = lastTwelveMonths[i],
                Value = baseAmount
            });
        }

        monthlyExpenseData = monthlyExpenses;

        // Sample category monthly data for table
        var categories = new[] { "Housing", "Food", "Transportation", "Entertainment", "Utilities" };
        categoryMonthlyData = new List<CategoryMonthlyData>();
        monthlyTotals = new List<decimal>();

        // Initialize monthly totals
        for (var i = 0; i < 12; i++)
        {
            monthlyTotals.Add(0);
        }

        foreach (var category in categories)
        {
            var categoryData = new CategoryMonthlyData
            {
                CategoryName = category,
                MonthlyAmounts = new List<MonthAmount>(),
                Total = 0
            };

            for (int i = 0; i < 12; i++)
            {
                // Generate a random amount for this category and month
                decimal baseValue = category switch
                {
                    "Housing" => 1200,
                    "Food" => 450,
                    "Transportation" => 350,
                    "Entertainment" => 200,
                    "Utilities" => 145,
                    _ => 100
                };

                // Add some variation
                decimal amount = baseValue + random.Next(-50, 100);

                // Ensure no negative values
                amount = Math.Max(0, amount);

                var monthAmount = new MonthAmount
                {
                    Month = lastTwelveMonths[i],
                    Amount = amount
                };

                categoryData.MonthlyAmounts.Add(monthAmount);
                categoryData.Total += amount;
                monthlyTotals[i] += amount;
            }

            categoryMonthlyData.Add(categoryData);
        }

        // Calculate grand total
        grandTotal = monthlyTotals.Sum();
    }

    // Class to represent monthly data for each category
    private class CategoryMonthlyData
    {
        public string CategoryName { get; set; } = "";
        public List<MonthAmount> MonthlyAmounts { get; set; } = [];
        public decimal Total { get; set; }
    }

    // Class to represent amount for a specific month
    private class MonthAmount
    {
        public string Month { get; set; } = "";
        public decimal Amount { get; set; }
    }

}