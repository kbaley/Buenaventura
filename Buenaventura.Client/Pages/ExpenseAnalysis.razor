@page "/expense-analysis"
@using Buenaventura.Client.Components.DashboardCharts
@inject IDashboardService dashboardService

@attribute [Authorize]

<MudText Typo="Typo.h4" GutterBottom="true">Expense Analysis</MudText>

<MudGrid>
    <!-- Monthly Expenses Line Chart -->
    <MudItem xs="12" md="9">
        <LineChart
            IsLoading="isLoading"
            ChartData="@monthlyExpenseData"
            TrendLine="@monthlyExpenseTrendLine"
            Title="Monthly Expenses (Last 12 Months)"
            Height="350"
        />
    </MudItem>

    <!-- Total Expenses This Month -->
    <MudItem xs="12" md="3">
        <MudGrid>
            <MudItem xs="12">
                <MudPaper Elevation="1" Class="pa-4">
                    <MudText Typo="Typo.h6">Expenses This Month</MudText>
                    <MudText Typo="Typo.h4" Color="Color.Success">@(expensesThisMonth.ToString("C0"))</MudText>
                </MudPaper>
            </MudItem>
            <MudItem xs="12">
                <MudPaper Elevation="1" Class="pa-4">
                    <MudText Typo="Typo.h6">Average Monthly Expenses</MudText>
                    <MudText Typo="Typo.h4" Color="Color.Success">@(averageMonthlyExpenses.ToString("C0"))</MudText>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudItem>

    <!-- Expense Breakdown by Category -->
    <MudItem xs="12" md="6">
        <MudPaper Elevation="1" Class="pa-4" Height="335px">
            <ExpenseChart
                IsLoading="@isLoading"
                ExpenseData="@expenseData"
            />
        </MudPaper>
    </MudItem>

    <!-- Expense Averages -->
    <MudItem xs="12" md="6">
        <MudPaper Elevation="1" Class="pa-4" Height="335px">
            <ExpenseAveragesChart
                IsLoading="isLoading"
                ExpenseData="@expenseAveragesData"
            />
        </MudPaper>
    </MudItem>

    <!-- Expense Category Monthly Breakdown Table -->
    <MudItem xs="12">
        <MudPaper Elevation="1" Class="pa-4">
            <MudText Typo="Typo.h6" GutterBottom="true">Expense Categories by Month</MudText>
            <MudTable Items="@categoryMonthlyData" Dense="true" Hover="true" Bordered="true" Striped="true">
                <HeaderContent>
                    <MudTh>Category</MudTh>
                    @foreach (var month in lastTwelveMonths)
                    {
                        <MudTh>@month.ToString("MMM yyyy")</MudTh>
                    }
                    <MudTh>Total</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Category">@context.CategoryName</MudTd>
                    @foreach (var month in lastTwelveMonths)
                    {
                        var categoryAmount = context.Amounts.SingleOrDefault(a => a.Date.Month == month.Month && a.Date.Year == month.Year);
                        var amount = categoryAmount?.Amount ?? 0m;
                        <MudTd DataLabel="@month.Date.ToString("MMM yyyy")">@amount.ToString("C0")</MudTd>
                    }
                    <MudTd DataLabel="Total">@context.Total.ToString("C0")</MudTd>
                </RowTemplate>
                <FooterContent>
                    <MudTh>Total</MudTh>
                    @foreach (var total in monthlyTotals)
                    {
                        <MudTh>@total.ToString("C0")</MudTh>
                    }
                    <MudTh>@grandTotal.ToString("C0")</MudTh>
                </FooterContent>
            </MudTable>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private bool isLoading = true;
    private decimal expensesThisMonth;
    private decimal averageMonthlyExpenses;
    private IEnumerable<ReportDataPoint> expenseData = [];
    private IEnumerable<ExpenseAveragesDataPoint> expenseAveragesData = [];
    private IEnumerable<ReportDataPoint> monthlyExpenseData = [];
    private IEnumerable<ReportDataPoint> monthlyExpenseTrendLine = [];
    private List<DateTime> lastTwelveMonths = [];
    private List<CategoryTotal> categoryMonthlyData = [];
    private List<decimal> monthlyTotals = [];
    private decimal grandTotal = 0;

    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;
        var expenseBreakdownTask = dashboardService.GetExpenseTotalsByMonth();
        var expensesTask = dashboardService.GetThisMonthExpenses();
        var expenseTask = dashboardService.GetExpenseCategoryBreakdown();
        var expenseAveragesTask = dashboardService.GetExpenseAveragesData();
        await Task.WhenAll(
            expensesTask,
            expenseTask,
            expenseAveragesTask,
            expenseBreakdownTask
        );

        expensesThisMonth = -(await expensesTask);
        expenseData = await expenseTask;
        expenseAveragesData = await expenseAveragesTask;
        var expenseBreakdown = await expenseBreakdownTask;

        StateHasChanged();
        isLoading = false;


        GenerateData(expenseBreakdown);
        monthlyExpenseTrendLine = CalculateTrendLine(expenseBreakdown.MonthTotals?.ToList());
        averageMonthlyExpenses = (expenseBreakdown.MonthTotals?
            .Where(x => x.Date.Date != DateTime.Today.Date)
            .Sum(x => x.Amount) ?? 0m) / 11m;
        categoryMonthlyData = expenseBreakdown.Expenses.ToList();
        // GenerateSampleData();
    }

    private void GenerateData(CategoryTotals expenseBreakdown)
    {
        var currentDate = DateTime.Now;
        lastTwelveMonths = [];
        monthlyTotals = [];
        for (var i = 11; i >= 0; i--)
        {
            var date = currentDate.AddMonths(-i);
            monthlyTotals.Add(expenseBreakdown.Expenses
                .Select(x => x.Amounts.FirstOrDefault(a => a.Date.Month == date.Month && a.Date.Year == date.Year)?.Amount ?? 0m).Sum());
            lastTwelveMonths.Add(date);
        }
        grandTotal = monthlyTotals.Sum();


        if (expenseBreakdown.MonthTotals == null)
        {
            monthlyExpenseData = [];
            return;
        }

        monthlyExpenseData = expenseBreakdown.MonthTotals
            .OrderBy(x => x.Date)
            .Select(x => new ReportDataPoint
            {
                Label = x.Date.ToString("MMM yyyy"),
                Value = x.Amount,
            });
    }

    private List<ReportDataPoint> CalculateTrendLine(List<MonthlyAmount>? data)
    {
        if (data == null || data.Count < 2)
            return [];

        // Ignore the current month so we don't skew the results
        var n = data.Count - 1;
        var sumX = 0.0;
        var sumY = 0.0;
        var sumXY = 0.0;
        var sumXX = 0.0;

        // Convert data points to numerical values for regression
        for (var i = 0; i < n; i++)
        {
            var y = (double)data[i].Amount;

            sumX += i;
            sumY += y;
            sumXY += i * y;
            sumXX += i * i;
        }

        // Calculate slope (m) and y-intercept (b) for y = mx + b
        var slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);
        var intercept = (sumY - slope * sumX) / n;

        // Generate trend line points
        var trendPoints = new List<ReportDataPoint>();
        for (var i = 0; i < n; i++)
        {
            var trendValue = slope * i + intercept;
            trendPoints.Add(new ReportDataPoint
            {
                Label = data[i].Date.ToString("MMM yyyy"),
                Value = (decimal)trendValue
            });
        }

        return trendPoints;
    }


    // private void GenerateSampleData()
    // {
    //     // Generate last 12 months
    //     var currentDate = DateTime.Now;
    //     for (int i = 11; i >= 0; i--)
    //     {
    //         var date = currentDate.AddMonths(-i);
    //         lastTwelveMonths.Add(date.ToString("MMM yyyy"));
    //     }
    //
    //     // Sample monthly expense data for line chart
    //     var monthlyExpenses = new List<ReportDataPoint>();
    //     var random = new Random(123); // Fixed seed for consistent sample data
    //     for (int i = 0; i < 12; i++)
    //     {
    //         var baseAmount = 2000 + random.Next(-300, 500);
    //         monthlyExpenses.Add(new ReportDataPoint
    //         {
    //             Label = lastTwelveMonths[i],
    //             Value = baseAmount
    //         });
    //     }
    //
    //     // Sample category monthly data for table
    //     var categories = new[] { "Housing", "Food", "Transportation", "Entertainment", "Utilities" };
    //     categoryMonthlyData = new List<CategoryMonthlyData>();
    //     monthlyTotals = new List<decimal>();
    //
    //     // Initialize monthly totals
    //     for (var i = 0; i < 12; i++)
    //     {
    //         monthlyTotals.Add(0);
    //     }
    //
    //     foreach (var category in categories)
    //     {
    //         var categoryData = new CategoryMonthlyData
    //         {
    //             CategoryName = category,
    //             MonthlyAmounts = new List<MonthAmount>(),
    //             Total = 0
    //         };
    //
    //         for (int i = 0; i < 12; i++)
    //         {
    //             // Generate a random amount for this category and month
    //             decimal baseValue = category switch
    //             {
    //                 "Housing" => 1200,
    //                 "Food" => 450,
    //                 "Transportation" => 350,
    //                 "Entertainment" => 200,
    //                 "Utilities" => 145,
    //                 _ => 100
    //             };
    //
    //             // Add some variation
    //             decimal amount = baseValue + random.Next(-50, 100);
    //
    //             // Ensure no negative values
    //             amount = Math.Max(0, amount);
    //
    //             var monthAmount = new MonthAmount
    //             {
    //                 Month = lastTwelveMonths[i],
    //                 Amount = amount
    //             };
    //
    //             categoryData.MonthlyAmounts.Add(monthAmount);
    //             categoryData.Total += amount;
    //             monthlyTotals[i] += amount;
    //         }
    //
    //         categoryMonthlyData.Add(categoryData);
    //     }
    //
    //     // Calculate grand total
    //     grandTotal = monthlyTotals.Sum();
    // }

    // Class to represent monthly data for each category
    private class CategoryMonthlyData
    {
        public string CategoryName { get; set; } = "";
        public List<MonthAmount> MonthlyAmounts { get; set; } = [];
        public decimal Total { get; set; }
    }

    // Class to represent amount for a specific month
    private class MonthAmount
    {
        public string Month { get; set; } = "";
        public decimal Amount { get; set; }
    }

}