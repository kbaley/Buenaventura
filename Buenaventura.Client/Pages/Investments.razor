@page "/Investments"
@using Buenaventura.Client.Services
@using Buenaventura.Shared
@inject IInvestmentService investmentService
@inject NavigationManager NavigationManager

<MudText Typo="Typo.h4" GutterBottom="true">Investments</MudText>

@if (investments == null)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
}
else
{
    <MudPaper Elevation="0" Class="pa-4 mb-4" Style="background-color: var(--mud-palette-surface);">
        <MudGrid>
            <MudItem xs="12" sm="4">
                <MudText Typo="Typo.h6" GutterBottom="true">Portfolio Value</MudText>
                <MudText Typo="Typo.h4" Color="Color.Primary">@investments.Sum(i => i.CurrentValue).ToString("C2")</MudText>
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudText Typo="Typo.h6" GutterBottom="true">Portfolio IRR</MudText>
                <MudText Typo="Typo.h4" Color="Color.Primary">@portfolioIrr.ToString("P2")</MudText>
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudStack Spacing="2" Row="true" Justify="Justify.FlexEnd">
                    <MudTooltip Text="Update current prices">
                        <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Primary" OnClick="UpdatePrices" />
                    </MudTooltip>
                    <MudTooltip Text="Sync portfolio value with Investments account">
                        <MudIconButton Icon="@Icons.Material.Filled.Sync" Color="Color.Secondary" OnClick="SyncPortfolioValue" />
                    </MudTooltip>
                    <MudTooltip Text="Compare portfolio with desired ratios">
                        <MudIconButton Icon="@Icons.Material.Filled.Compare" Color="Color.Info" OnClick="ComparePortfolioRatios" />
                    </MudTooltip>
                </MudStack>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <MudGrid>
        @foreach (var investment in investments)
        {
            <MudItem xs="12" sm="6" md="4">
                <MudCard Elevation="2" Style="height: 370px; display: flex; flex-direction: column;">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@investment.Name (@investment.Symbol)</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="() => EditInvestment(investment)" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Primary" OnClick="() => DeleteInvestment(investment)" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent Style="flex: 1; padding: 16px;">
                        <MudGrid>
                            <MudItem xs="6">
                                <MudStack Spacing="2">
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">Current Price</MudText>
                                    <MudText Typo="Typo.body1">@investment.LastPrice.ToString("C2")</MudText>
                                    
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">Shares</MudText>
                                    <MudText Typo="Typo.body1">@investment.Shares.ToString("N4")</MudText>
                                    
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">Average Price</MudText>
                                    <MudText Typo="Typo.body1">@investment.AveragePrice.ToString("C2")</MudText>
                                </MudStack>
                            </MudItem>
                            <MudItem xs="6">
                                <MudStack Spacing="2">
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">IRR</MudText>
                                    <MudText Typo="Typo.h6" Color="Color.Primary">@investment.AnnualizedIrr.ToString("P2")</MudText>
                                    
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">Current Value</MudText>
                                    <MudText Typo="Typo.h6" Color="Color.Primary">@investment.CurrentValue.ToString("C2")</MudText>
                                </MudStack>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                    <MudCardActions Style="justify-content: space-between; padding: 8px;">
                        <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Add" OnClick="() => BuySellInvestment(investment, true)">Buy</MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Remove" OnClick="() => BuySellInvestment(investment, false)">Sell</MudButton>
                        @if (investment.PaysDividends)
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.AttachMoney" OnClick="() => RecordDividend(investment)">Record Dividend</MudButton>
                        }
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

@code {
    private IEnumerable<InvestmentForListDto>? investments;
    private double portfolioIrr;

    protected override async Task OnInitializedAsync()
    {
        var investmentList = await investmentService.GetInvestments();
        investments = investmentList.Investments;
        portfolioIrr = investmentList.PortfolioIrr;
    }

    private void EditInvestment(InvestmentForListDto investment)
    {
        NavigationManager.NavigateTo($"/Investments/Edit/{investment.InvestmentId}");
    }

    private async Task DeleteInvestment(InvestmentForListDto investment)
    {
        // TODO: Implement delete functionality
    }

    private void BuySellInvestment(InvestmentForListDto investment, bool isBuy)
    {
        NavigationManager.NavigateTo($"/Investments/BuySell/{investment.InvestmentId}?isBuy={isBuy}");
    }

    private void RecordDividend(InvestmentForListDto investment)
    {
        NavigationManager.NavigateTo($"/Investments/Dividend/{investment.InvestmentId}");
    }

    private async Task UpdatePrices()
    {
        var investmentList = await investmentService.UpdateCurrentPrices();
        investments = investmentList.Investments;
        portfolioIrr = investmentList.PortfolioIrr;
        StateHasChanged();
    }

    private void SyncPortfolioValue()
    {
    }

    private void ComparePortfolioRatios()
    {
        NavigationManager.NavigateTo("/Investments/Ratios");
    }
}