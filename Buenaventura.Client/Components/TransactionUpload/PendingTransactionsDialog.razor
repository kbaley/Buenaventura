@inject ITransactionsApi TransactionsApi
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudTable Items="@PendingTransactions" Dense="true" Hover="true" Bordered="true" Striped="false" 
                  FixedHeader="true" Height="500px">
            <HeaderContent>
                <MudTh>
                    <MudCheckBox Value="@SelectAll" 
                                 T="bool"
                                 Color="Color.Primary" 
                                 ValueChanged="@((bool newValue) => SelectAllChanged(newValue))"
                    />
                </MudTh>
                <MudTh Style="width: 125px;">Date</MudTh>
                <MudTh Style="width: 175px;">Vendor</MudTh>
                <MudTh Style="width: 150px;">Reference #</MudTh>
                <MudTh Class="flex-grow-1">Description</MudTh>
                <MudTh Class="transaction-amount">Debit</MudTh>
                <MudTh Class="transaction-amount">Credit</MudTh>
            </HeaderContent>
            <RowTemplate Context="transaction">
                <MudTd Style="@GetRowStyle(transaction)">
                    <MudCheckBox @bind-Value="@transaction.IsSelected" 
                                 T="bool"
                                 Color="Color.Primary" 
                                 Disabled="@transaction.IsAlreadyProcessed"/>
                </MudTd>
                <MudTd DataLabel="Date" Style="@GetRowStyle(transaction)">@transaction.DateFormatted</MudTd>
                <MudTd DataLabel="Vendor" Style="@GetRowStyle(transaction)">@transaction.Vendor</MudTd>
                <MudTd DataLabel="Reference #" Style="@GetRowStyle(transaction)">@transaction.ReferenceNumber</MudTd>
                <MudTd DataLabel="Description" Style="@GetRowStyle(transaction)">@transaction.Description</MudTd>
                <MudTd DataLabel="Debit" Class="transaction-amount" Style="@GetRowStyle(transaction)">@transaction.DebitFormatted</MudTd>
                <MudTd DataLabel="Credit" Class="transaction-amount" Style="@GetRowStyle(transaction)">@transaction.CreditFormatted</MudTd>
                
            </RowTemplate>
            <ChildRowContent Context="transaction">
                @if (transaction is { HasPotentialMatch: true, PotentialMatch: not null })
                {
                    <MudTr Style="background-color: rgba(255, 255, 0, 0.2);">
                        <MudTd></MudTd>
                        <MudTd>@transaction.PotentialMatch.TransactionDate.ToString("MM/dd/yyyy")</MudTd>
                        <MudTd>@transaction.PotentialMatch.Vendor</MudTd>
                        <MudTd>@transaction.PotentialMatch.DownloadId</MudTd>
                        <MudTd>@transaction.PotentialMatch.Description</MudTd>
                        <MudTd Class="transaction-amount">@(transaction.PotentialMatch.Debit?.ToString("N2"))</MudTd>
                        <MudTd Class="transaction-amount">@(transaction.PotentialMatch.Credit?.ToString("N2"))</MudTd>
                    </MudTr>
                }
            </ChildRowContent>
        </MudTable>
        
        <MudText Typo="Typo.body2" Class="mt-4">
            <MudChip T="string" Color="Color.Success" Size="Size.Small">Green</MudChip> Already processed transactions
        </MudText>
        <MudText Typo="Typo.body2">
            <MudChip T="string" Color="Color.Warning" Size="Size.Small">Yellow</MudChip> Potential matches with existing transactions
        </MudText>
        
        <MudText Typo="Typo.body1" Class="mt-4">
            Selected transactions: @PendingTransactions.Count(t => t.IsSelected) of @PendingTransactions.Count
        </MudText>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="SaveTransactions">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance? MudDialog { get; set; } = null!;
    [Parameter] public List<PendingTransactionModel> PendingTransactions { get; set; } = new();
    [Parameter] public Guid AccountId { get; set; }
    
    private bool SelectAll { get; set; }
    
    private void SelectAllChanged(bool value)
    {
        SelectAll = value;
        foreach (var transaction in PendingTransactions.Where(t => !t.IsAlreadyProcessed))
        {
            transaction.IsSelected = value;
        }
    }
    
    private string GetRowStyle(PendingTransactionModel transaction)
    {
        if (transaction.IsAlreadyProcessed)
        {
            return "background-color: rgba(0, 255, 0, 0.2);"; // Light green
        }
        
        if (transaction.HasPotentialMatch)
        {
            return "background-color: rgba(255, 255, 0, 0.2);"; // Light yellow
        }
        
        return string.Empty;
    }
    
    private void Cancel()
    {
        MudDialog!.Cancel();
    }
    
    private async Task SaveTransactions()
    {
        try
        {
            var selectedTransactions = PendingTransactions.Where(t => t.IsSelected).ToList();
            
            if (!selectedTransactions.Any())
            {
                Snackbar.Add("No transactions selected", Severity.Warning);
                return;
            }
            
            // Convert pending transactions to TransactionForDisplay objects
            var transactionsToAdd = new List<TransactionForDisplay>();
            foreach (var selectedTransaction in selectedTransactions)
            {
                var transactionToSync = new TransactionForDisplay
                {
                    TransactionDate = selectedTransaction.TransactionDate,
                    Vendor = selectedTransaction.Vendor,
                    Description = selectedTransaction.Description ?? string.Empty,  
                    Debit = selectedTransaction.Debit,
                    Credit = selectedTransaction.Credit,
                    DownloadId = selectedTransaction.ReferenceNumber,
                    AccountId = AccountId
                };
                if (selectedTransaction is { HasPotentialMatch: true, PotentialMatch: not null })
                {
                    transactionToSync.TransactionId = selectedTransaction.PotentialMatch.TransactionId;
                    // Copy the imported description if the potential match doesn't already have one
                    if (string.IsNullOrWhiteSpace(selectedTransaction.PotentialMatch.Description))
                    {
                        transactionToSync.Description = selectedTransaction.Description ?? string.Empty;
                    }
                    // Also make sure we keep the same category
                    transactionToSync.Category = selectedTransaction.PotentialMatch.Category;
                }
                transactionsToAdd.Add(transactionToSync);
            }

            try
            {
                await TransactionsApi.AddBulkTransactions(AccountId, new CreateBulkTransactionsRequest(AccountId, transactionsToAdd));
                Snackbar.Add($"Successfully added {selectedTransactions.Count} transactions", Severity.Success);
                MudDialog!.Close(DialogResult.Ok(true));
            } catch
            {
                const string errorMessage = "An error occurred while adding transactions.";
                Snackbar.Add(errorMessage, Severity.Error);
            }
            
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }
}
