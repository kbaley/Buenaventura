@using System.Text.Json
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IAccountsApi AccountsApi

<MudButton Variant="Variant.Filled"
           Color="Color.Primary"
           OnClick="OpenFileUpload"
           StartIcon="@Icons.Material.Filled.Upload"
           Class="ml-2 d-none d-md-inline-flex"
           Title="Upload transactions from Excel">
    Upload
</MudButton>

<InputFile id="fileInput" OnChange="OnInputFileChange" style="display:none" accept=".xls,.xlsx"/>

@code {
    [Parameter] public Guid AccountId { get; set; }
    [Parameter] public EventCallback OnTransactionsProcessed { get; set; }

    private InputFile? fileInput;

    private async Task OpenFileUpload()
    {
        await JSRuntime.InvokeVoidAsync("openBulkTransactionFileInput");
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file == null)
            {
                return;
            }

            // Read the file content
            using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10MB max
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            memoryStream.Position = 0;

            // Process the Excel file using JSInterop
            var fileData = Convert.ToBase64String(memoryStream.ToArray());
            var excelData = await JSRuntime.InvokeAsync<string>("parseExcelFile", fileData);

            if (string.IsNullOrEmpty(excelData))
            {
                Snackbar.Add("Failed to parse Excel file", Severity.Error);
                return;
            }

            var pendingTransactions = ParseExcelData(excelData);

            // Check for already processed transactions
            await CheckForProcessedTransactions(pendingTransactions);

            // Show the dialog with pending transactions
            var options = new DialogOptions { MaxWidth = MaxWidth.ExtraLarge, FullWidth = true, CloseButton = true };
            var parameters = new DialogParameters
            {
                ["PendingTransactions"] = pendingTransactions,
                ["AccountId"] = AccountId
            };

            var dialog = await DialogService.ShowAsync<PendingTransactionsDialog>("Review Transactions", parameters, options);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                await OnTransactionsProcessed.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error processing file: {ex.Message}", Severity.Error);
        }
    }

    private List<PendingTransactionModel> ParseExcelData(string jsonData)
    {
        var rows = JsonSerializer.Deserialize<List<Dictionary<string, object>>>(jsonData);
        var transactions = new List<PendingTransactionModel>();

        if (rows == null || rows.Count == 0)
        {
            return transactions;
        }

        // Skip header rows (start from row 16 as per the screenshot)
        foreach (var row in rows)
        {
            if (!row.TryGetValue("Date", out var dateObj) ||
                !row.TryGetValue("Reference number", out var refObj) ||
                !row.TryGetValue("Card number", out var cardObj) ||
                !row.TryGetValue("Description", out var descObj) ||
                !row.TryGetValue("Dollars", out var amountObj))
            {
                continue;
            }

            // Parse the date
            if (dateObj is JsonElement { ValueKind: JsonValueKind.String } element 
                && DateTime.TryParse(element.GetString(), out var transactionDate))
            {
                // Parse the amount
                if (amountObj is JsonElement { ValueKind: JsonValueKind.String} amountStr && 
                    decimal.TryParse(amountStr.GetString()!.Replace(",", ""), out var amount))
                {
                    transactions.Add(new PendingTransactionModel
                    {
                        ReferenceNumber = refObj.ToString(),
                        TransactionDate = transactionDate,
                        CardNumber = cardObj.ToString(),
                        Description = descObj.ToString(),
                        Vendor = "",
                        Amount = amount,
                        IsSelected = true
                    });
                }
            }
        }

        return transactions;
    }

    private async Task CheckForProcessedTransactions(List<PendingTransactionModel> pendingTransactions)
    {
        var start = pendingTransactions.Min(t => t.TransactionDate).AddDays(-7);
        var end = pendingTransactions.Max(t => t.TransactionDate).AddDays(7);
        // Get existing transactions to check for duplicates
        var existingTransactions = await AccountsApi.GetAllTransactions(AccountId, start, end);

        foreach (var transaction in pendingTransactions)
        {
            // Check if already processed by DownloadId
            if (!string.IsNullOrEmpty(transaction.ReferenceNumber))
            {
                // Need to match the reference number AND other fields because the bank reference numbers
                // are just the amount of the transaction with the decimal removed and some zero padding
                var alreadyProcessed = existingTransactions.Items.Any(t =>
                    t.DownloadId == transaction.ReferenceNumber && t.TransactionDate == transaction.TransactionDate 
                    && -t.Amount == transaction.Amount);
                
                if (alreadyProcessed)
                {
                    transaction.IsAlreadyProcessed = true;
                    transaction.IsSelected = false;
                    continue;
                }
            }

            // Check for potential matches based on date and amount
            var potentialMatches = existingTransactions.Items.Where(t =>
                t.TransactionDate.Date == transaction.TransactionDate.Date &&
                -transaction.Amount == t.Amount
            ).ToList();

            if (potentialMatches.Any())
            {
                transaction.HasPotentialMatch = true;
                transaction.PotentialMatch = potentialMatches.First();
                transaction.IsSelected = true;
            }
        }
    }

}
