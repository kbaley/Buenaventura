@using ApexCharts
@using Color = MudBlazor.Color
@inherits LayoutComponentBase
@inject IJSRuntime JS
@inject NavigationManager navigationManager
@inject AccountSyncService accountSyncService
@inject IAccountService accountService
@inject ICategoryService categoryService
@inject IApexChartService apexChartService

<PageTitle>Buenaventura Personal Finance Manager</PageTitle>

<MudThemeProvider @ref="@mudThemeProvider" Theme="@theme" @bind-IsDarkMode="isDarkMode"/>
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>
<CascadingValue Value="accounts">
    <CascadingValue Value="categories">
        <MudLayout>
            <MudAppBar Elevation="25">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
                               OnClick="@((e) => DrawerToggle())"/>
                <MudLink Href="/" Style="display: inline-block;">
                    <MudImage Class="ml-3" Src="images/logo-horizontal-light.png" Height="35"/>
                </MudLink>
                <MudSpacer/>
                <MudButton Variant="Variant.Text" Color="Color.Inherit" Href="investments" Class="d-none d-sm-flex">
                    <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Class="me-1"/>
                    <span>Investments</span>
                </MudButton>
                <MudButton Variant="Variant.Text" Color="Color.Inherit" Href="investments" Class="d-flex d-sm-none">
                    <MudIcon Icon="@Icons.Material.Filled.TrendingUp"/>
                </MudButton>

                <MudButton Variant="Variant.Text" Color="Color.Inherit" Href="invoices" Class="d-none d-sm-flex">
                    <MudIcon Icon="@Icons.Material.Filled.Receipt" Class="me-1"/>
                    <span>Invoices</span>
                </MudButton>
                <MudButton Variant="Variant.Text" Color="Color.Inherit" Href="invoices" Class="d-flex d-sm-none">
                    <MudIcon Icon="@Icons.Material.Filled.Receipt"/>
                </MudButton>

                <MudButton Variant="Variant.Text" Color="Color.Inherit" Href="reports" Class="d-flex d-sm-none">
                    <MudIcon Icon="@Icons.Material.Filled.Assessment"/>
                </MudButton>

                <MudDivider Vertical="true" FlexItem="true" Class="mx-2"/>
                <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle"/>
                <MudMenu Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit">
                    <MudMenuItem Icon="@Icons.Material.Filled.Category" IconColor="Color.Primary" Label="Categories" Href="categories"/>
                    <MudMenuItem Icon="@Icons.Material.Filled.People" IconColor="Color.Primary" Label="Customers" Href="customers"/>
                    <MudMenuItem Icon="@Icons.Material.Filled.Description" IconColor="Color.Primary" Label="Invoice Template" Href="invoicetemplate"/>
                    <MudMenuItem Icon="@Icons.Material.Filled.Sort" IconColor="Color.Primary" Label="Accounts" Href="accounts"/>
                    <MudDivider />
                    @if (IsLocalhost)
                    {
                        <MudMenuItem Icon="@Icons.Material.Filled.Shuffle" IconColor="Color.Primary" Label="Scramble Database" Href="scramble"/>
                        <MudDivider />
                    }
                    <MudMenuItem Icon="@Icons.Material.Filled.Logout"
                                 OnClick="Logout"
                                 IconColor="Color.Primary" Label="Logout"/>
                </MudMenu>
                <form action="Account/Logout" method="post">
                    <AntiforgeryToken/>
                    <input type="hidden" name="ReturnUrl" value=""/>
                </form>
            </MudAppBar>
            <MudDrawer id="nav-drawer" @bind-Open="drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="7" Width="350px">
                <NavMenu/>
            </MudDrawer>
            <MudMainContent Class="pt-16 pa-4">
                <MudContainer Class="pt-6" Gutters="false">
                    <CascadingAuthenticationState>
                        @Body
                    </CascadingAuthenticationState>
                </MudContainer>
            </MudMainContent>
        </MudLayout>
    </CascadingValue>
</CascadingValue>

<form id="logoutForm" method="post" action="Account/Logout">
    <AntiforgeryToken/>
    <input type="hidden" name="ReturnUrl" value="@currentUrl"/>
</form>


<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {

    private bool drawerOpen = true;
    private bool isDarkMode = true;
    private MudTheme? theme;
    private string? currentUrl;
    private MudThemeProvider? mudThemeProvider;
    private IEnumerable<AccountWithBalance> accounts = [];
    private IEnumerable<CategoryModel> categories = [];
    private bool IsLocalhost => navigationManager.BaseUri.Contains("localhost") || 
                              navigationManager.BaseUri.Contains("127.0.0.1") ||
                              navigationManager.BaseUri.Contains("::1") ||
                              navigationManager.BaseUri.Contains("0.0.0.0");

    private async Task OnAccountsUpdated()
    {
        accounts = await accountService.GetAccounts();
        categories = await categoryService.GetCategories();
        StateHasChanged();
    }


    protected override async Task OnInitializedAsync()
    {
        theme = new MudTheme
        {
            PaletteLight = Themes.Light(),
            PaletteDark = Themes.Dark(),
            LayoutProperties = new LayoutProperties()
        };
        await base.OnInitializedAsync();
        accounts = await accountService.GetAccounts();
        categories = await categoryService.GetCategories();
        accountSyncService.OnAccountsUpdated += OnAccountsUpdated;

        currentUrl = navigationManager.ToBaseRelativePath(navigationManager.Uri);
        navigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = navigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }


    private void DrawerToggle()
    {
        drawerOpen = !drawerOpen;
    }

    private void DarkModeToggle()
    {
        setTheme(!isDarkMode);
    }

    private void setTheme(bool newDarkMode)
    {
        isDarkMode = newDarkMode;
        var chartTheme = apexChartService.GlobalOptions.Theme;
        chartTheme.Mode = isDarkMode ? Mode.Dark : Mode.Light;
        apexChartService.GlobalOptions.Theme = chartTheme;
        StateHasChanged();
    }

    private string DarkLightModeButtonIcon => isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };

    private async Task Logout(MouseEventArgs obj)
    {
        await JS.InvokeVoidAsync("submitLogoutForm");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // setTheme(true);
            setTheme(await mudThemeProvider!.GetSystemPreference());
            StateHasChanged();
        }
    }

}


