@inherits LayoutComponentBase
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<MudThemeProvider @ref="@mudThemeProvider" Theme="@theme" @bind-IsDarkMode="isDarkMode"/>
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>
<MudLayout>
    <MudAppBar Elevation="25">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
                       OnClick="@((e) => DrawerToggle())"/>
        <MudImage Class="ml-3" Src="images/logo-horizontal-light.png" Height="35" />
        <MudSpacer/>
        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle"/>
        <MudMenu Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" >
            <MudMenuItem Icon="@Icons.Material.Filled.Person" IconColor="Color.Primary" Label="Profile"/>
            <MudMenuItem Icon="@Icons.Material.Filled.Logout"
                         OnClick="Logout"
                         IconColor="Color.Primary" Label="Logout"/>
        </MudMenu>
        <form action="Account/Logout" method="post">
            <AntiforgeryToken/>
            <input type="hidden" name="ReturnUrl" value=""/>
            <button type="submit" class="nav-link">
                <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
            </button>
        </form>
    </MudAppBar>
    <MudDrawer id="nav-drawer" @bind-Open="drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="7" Width="350px">
        <NavMenu/>
    </MudDrawer>
    <MudMainContent Class="pt-16 pa-4">
        <MudContainer Class="pt-6" Gutters="false">
            <CascadingAuthenticationState>
                @Body
            </CascadingAuthenticationState>
        </MudContainer>
    </MudMainContent>
</MudLayout>

<form id="logoutForm" method="post" action="Account/Logout">
    <AntiforgeryToken/>
    <input type="hidden" name="ReturnUrl" value="@currentUrl"/>
</form>


<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {

    private bool drawerOpen = true;
    private bool isDarkMode = true;
    private MudTheme? theme;
    private string? currentUrl;
    private MudThemeProvider? mudThemeProvider;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
        theme = new MudTheme
        {
            PaletteLight = Themes.Light(),
            PaletteDark = Themes.Dark(),
            LayoutProperties = new LayoutProperties()
        };
        StateHasChanged();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }


    private void DrawerToggle()
    {
        drawerOpen = !drawerOpen;
    }

    private async Task DarkModeToggle()
    {
        isDarkMode = !isDarkMode;
    }

    public string DarkLightModeButtonIcon => isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };

    private async Task Logout(MouseEventArgs obj)
    {
        await JS.InvokeVoidAsync("submitLogoutForm");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isDarkMode = await mudThemeProvider!.GetSystemPreference();
            StateHasChanged();
        }
    }

}


